Alumnos=read.csv("notas.csv")
colnames(Alumnos)
Alumnos$notas
Alumnos$notas
Alumnos$nota
Alumnos
head(Alumnos,12)
Alumnos
?summary.table
?tapply
tapply(Alumnos$Edad,Alumnos$especialidad,summary)
tapply(Alumnos$nota,Alumnos$especialidad,summary)
?hist
#dividiendo la zona de gráficas, 2 filas y 1 columna:
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = TRUE)
#dividiendo la zona de gráficas, 2 filas y 1 columna:
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = F)
par(mfrow=c(2,1))
hist(Alumnos$nota[Alumnos$especialidad==1])
hist(Alumnos$nota[Alumnos$especialidad==2])
?t.test
resultado_T=t.test(notas~especialidad,data=Alumnos)
resultado_T=t.test(nota~especialidad,data=Alumnos)
resultado_T$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos,exact = F)
resultado_W$p.value
resultado_W$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.10  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos,exact = F)
resultado_W$p.value
alfa=0.10  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
Empresa=read.csv("performance.csv")
colnames(Empresa)
Empresa
tapply(Empresa$performance,Empresa$grupo,summary)
tapply(Empresa$performance,Empresa$grupo,summary)
par(mfrow=c(3,1))
hist(Empresa$performance[Empresa$grupo==1])
hist(Empresa$performance[Empresa$grupo==2])
hist(Empresa$performance[Empresa$grupo==3])
boxplot(Empresa$performance~Empresa$grupo,horizontal = F)
resultado_F=aov(performance ~ grupo, data = Empresa)
resultado_F$p.value
resultado_F$p.value
resultado_F
str(resultado_F)
?aov
str(summary(resultado_F))
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F
str(resultado_F)
resultado_F$[1]
resultado_F
resultado_F$Pr(>F)
resultado_F$`Pr(>F)`
resultado_F$p.value
str(resultado_F)
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F=as.data.frame(resultado_F)
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F=unlist(resultado_F)
str(resultado_F)
resultado_F
resultado_F$`Pr(>F)1`
resultado_F[1]
resultado_F
resultado_F[9]
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
#resultado_F=unlist(resultado_F)
resultado_F[9]
resultado_F[[9]]
resultado_F[[1]]
resultado_F[[1]][5]
resultado_F[[1]][[5]]
resultado_F[[1]][[5]][1]
resultado_F[[1]][[5]]#[1]
resultado_F[[1]]#[[5]]#[1]
resultado_F[[1]][`Pr(>F)`]#[[5]]#[1]
resultado_F=summary(aov(performance ~ grupo, data = Empresa))[[1]][[5]][1]
resultado_F
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_F$p.value>=alfa
alfa=0.05  # puedes cambiar este valor
test=resultado_F>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
kruskal.test(performance~grupo,data=Empresa)
#resultado_KW=wilcox.test(performance~grupo,data=Empresa,exact = F)
resultado_KW=kruskal.test(performance~grupo,data=Empresa)
resultado_KW$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_KW$p.value>=alfa
ifelse(test,text1,text2)
?kruskal.test
Trabajadores=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/edades.csv")
Trabajadores=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/edades.csv")
colnames(Trabajadores)
Alumnos=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/notas.csv")
par(mfrow=c(2,1))
hist(Alumnos$nota[Alumnos$especialidad==1])
hist(Alumnos$nota[Alumnos$especialidad==2])
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = F)
par(mfrow=c(3,1))
hist(Empresa$performance[Empresa$grupo==1])
hist(Empresa$performance[Empresa$grupo==2])
hist(Empresa$performance[Empresa$grupo==3])
boxplot(Empresa$performance~Empresa$grupo,horizontal = F)
alfa=0.05  # puedes cambiar este valor
test=resultado_KW$p.value>=alfa
ifelse(test,text1,text2)
pairwise.wilcox.test((performance~grupo,data=Empresa,
pairwise.wilcox.test((performance~grupo,data=Empresa,p.adjust.method = "BH")
pairwise.wilcox.test(performance~grupo,data=Empresa,p.adjust.method = "BH")
?pairwise.wilcox.test
pairwise.wilcox.test(performance,grupo,data=,p.adjust.method = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adjust.method = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonf")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonf")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonferroni")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonferroni",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "none",exact=F)
```{r}
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BY",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "fdr",exact=F)
library(XML)
library(RCurl)
# URL
wiki="https://en.wikipedia.org/wiki/"
link = "World_Happiness_Report"
# Data
LINK = getURL(paste0(wiki,link))
feliz = readHTMLTable(LINK,
stringsAsFactors=FALSE,
which = 5)
names(feliz)[3:9]=c("score","gdp","social","lifeX","choices","generosity","corruption")
feliz[,c(3:9)]=lapply(feliz[,c(3:9)],as.numeric)
summary(feliz[,c(3:9)])
library(XML)
library(RCurl)
# URL
wiki="https://en.wikipedia.org/wiki/"
link = "World_Happiness_Report"
# Data
LINK = getURL(paste0(wiki,link))
feliz = readHTMLTable(LINK,
stringsAsFactors=FALSE,
which = 5)
names(feliz)[3:9]=c("score","gdp","social","lifeX","choices","generosity","corruption")
feliz[,c(3:9)]=lapply(feliz[,c(3:9)],as.numeric)
for(i in 1:ncol(feliz[,c(3:9)])){  # para cada columna:
MEDIA=mean(feliz[,c(3:9)][,i], na.rm = TRUE) # calcula la mediana de esa columna.
feliz[,c(3:9)][is.na(feliz[,c(3:9)][,i]), i] <- MEDIA # pon la mediana donde haya un NA en esa columna
}
summary(feliz[,c(3:9)])
cor(feliz[,c(4:9)])
cor(feliz[,c(4:9)])
cor(feliz[,c(4:9)])
cor(feliz[,c(3:9)])
cor(feliz[,c(4:9)])
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country ##como sabebemos que el nombre de las provincias no se
# Viendo resultado:
head(mapa)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa=scale(mapa)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_S,eig=TRUE, k=2)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
mapa_XY$GOF
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", main=titulo, type="n") # 'n' evita que se pongan los puntos.
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n") # 'n' evita que se pongan los puntos.
columnForLabels=dimnames(mapa_XY[[1]])[[1]] # etiquetas y colores de los puntos
text(x, y,labels = columnForLabels , cex = 0.5) #con cex indicamos el tamaño
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
mapa_XY$GOF
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
mapa_XY$GOF
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n")
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa_XY$GOF)
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa_XY$GOF[1])
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
dimnames(mapa_XY[[1]])[[1]]
mapa_XY[[1]]
mapa=feliz[,c(4:9)]
row.names(mapa) = feliz$Country
mapa_S=scale(mapa)
mapa_D=dist(mapa_S)
mapa_XY=cmdscale(mapa_D,eig=TRUE, k=2)
x <- mapa_XY$points[,1]
y <- mapa_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa_XY$GOF[1])
columnForLabels=dimnames(mapa_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "complete")
cuantosC
cuantosC
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "complete")
?NbClust
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "kmeans")
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "single")
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "average")
library(NbClust)
cuantosC <- NbClust(mapa_S, method = "complete")
View(mapa)
library(psych)
corrMat=cor(mapa)
KMO(corrMat)  #MSA: al menos 0.60, 0.9 es buenisimo.
cortest.bartlett(corrMat, n=nrow(mapa))
cortest.bartlett(corrMat, n=nrow(mapa))
resultadoPr=principal(scale(mapa),rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
resultadoPr=principal(scale(mapa),rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.3)
resultadoPr=principal(scale(mapa),rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.2)
resultadoPr$scores
summary(resultadoPr$scores)
resultadoPr[resultadoPr$scores==max(resultadoPr$scores),]
resultadoPr[resultadoPr$scores==max(resultadoPr$scores)]
resultadoPr[resultadoPr$scores==max(resultadoPr$scores,na.rm = T)]
resultadoPr[resultadoPr$scores==max(resultadoPr$scores,na.rm = T)]
resultadoPr[resultadoPr$scores==max(resultadoPr$scores,na.rm = T),]
max(resultadoPr$scores)
max(resultadoPr$scores)
sort(resultadoPr$scores)
max(resultadoPr$scores)
resultadoPr$scores==max(resultadoPr$scores)
resultadoPr$scores[resultadoPr$scores==max(resultadoPr$scores)]
resultadoPr$scores[resultadoPr$scores==max(resultadoPr$scores),]
resultadoPr
resultadoPr$scores#[resultadoPr$scores==max(resultadoPr$scores),]
resultadoPr$scores[resultadoPr$scores==max(resultadoPr$scores),]
row.names(resultadoPr$scores[resultadoPr$scores==max(resultadoPr$scores),])
row.names(resultadoPr$scores)
resultadoPr$scores[resultadoPr$scores==max(resultadoPr$scores),]
resultadoPr$scores#[resultadoPr$scores==max(resultadoPr$scores),]
sort(resultadoPr$scores)
resultadoPr$scores
r=data.frame(resultadoPr$scores)
View(r)
resultadoPr$scores
resultadoPr$scores[resultadoPr$scores$PC1==max(resultadoPr$scores$PC1),]
r=resultadoPr$scores
#[resultadoPr$scores$PC1==max(resultadoPr$scores$PC1),]
res=data.frame(resultadoPr$scores)
res=data.frame(resultadoPr$scores)
res[res$PC1==max(res$PC1),]
res=data.frame(resultadoPr$scores)
row.names(res[res$PC1==max(res$PC1),])
res=data.frame(resultadoPr$scores,row.names = row.names(resultadoPr$scores))
res[res$PC1==max(res$PC1),])
res=data.frame(resultadoPr$scores,row.names = row.names(resultadoPr$scores))
res[res$PC1==max(res$PC1),]
View(res)
res=data.frame(resultadoPr$scores)
res$country=row.names(resultadoPr$scores)
res[res$PC1==max(res$PC1),]
resultadoPr$scores
# URL
wiki="https://en.wikipedia.org/wiki/"
link = "Democracy_Index"
# Data
LINK = getURL(paste0(wiki,link))
demo = readHTMLTable(LINK,
stringsAsFactors=FALSE,
which = 2)
# URL
wiki="https://en.wikipedia.org/wiki/"
link = "Democracy_Index"
# Data
LINK = getURL(paste0(wiki,link))
demo = readHTMLTable(LINK,
stringsAsFactors=FALSE,
which = 2)
names(demo)[4:8]=c("elecciones","gobierno","participacion","cultura","civiles")
demo[,c(3:8)]=lapply(demo[,c(3:8)],as.numeric)
demo=demo[rowSums(!is.na(demo[,c(3:8)])) > 0,]
newOrder=c("Authoritarian", "Hybrid regime" ,"Flawed democracy","Full democracy")
demo$CategoryNum=factor(demo$Category,
levels = newOrder,
labels=c(1,2,3,4),
ordered = T)
summary(demo)
fd=merge(feliz,demo,by= 'Country')
View(fd)
fd=merge(feliz,demo,by= 'Country')
names(fd)
View(demo)
View(feliz)
fd=merge(feliz,demo,by= 'Country')
names(fd)
cor(fd$Score,fd$score)
cor(fd$Score,fd$score)
cor(fd$Score,fd$score)
cor(fd$Score,fd$score)
View(fd)
datafd=fd[,c(4:9,12:16)]
row.names(datafd)=datafd$Country
View(datafd)
datafd=fd[,c(4:9,12:16)]
row.names(datafd)=fd$Country
View(datafd)
library(psych)
corrMat=cor(datafd)
KMO(corrMat)  #MSA: al menos 0.60, 0.9 es buenisimo.
cortest.bartlett(corrMat, n=nrow(datafd))
resultadoPr=principal(scale(datafd),2,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
datafd=fd[,c(4:9,12:16)]
row.names(datafd)=fd$Country
names(datafd)
datafd=fd[,c(4:9,12:16)]
row.names(datafd)=fd$Country
cor(datafd)
View(demo)
View(feliz)
datafd=fd[,c(4:9,12:16)]
row.names(datafd)=fd$Country
cortest.bartlett(corrMat, n=nrow(datafd))
resultadoPr=principal(scale(datafd),2,rotate="varimax", scores=T)
print(resultadoPr,digits=3,cut = 0.4)
library(readxl)
gender=readxl::read_xls("2016_Statistical_Annex_Table_4.xls",skip = 4)
gender=gender[,c(2,3)]
names(gender)[2]="gendIX"
gender=gender[complete.cases(gender),]
gender=gender[c(1:195),]
tail(gender)
View(gender)
str(gender)
gender$gendIX=as.numeric(gender$gendIX)
View(gender)
gender$gendIX=as.numeric(gender$gendIX)
gender=gender[complete.cases(gender),]
View(gender)
fg=merge(fd,gender,by='Country')
names(fg)
cor(fg[,c(3,11,19)])
cor(fg[,c(3,11,19)])
mapa2=fg[,c(3,11,19)]
row.names(mapa2) = feliz$Country
mapa2=fg[,c(3,11,19)]
row.names(mapa2) = fg$Country
mapa2_S=scale(mapa2)
mapa2_D=dist(mapa2_S)
mapa2_XY=cmdscale(mapa2_D,eig=TRUE, k=2)
x <- mapa2_XY$points[,1]
y <- mapa2_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa2_XY$GOF[1])
columnForLabels=dimnames(mapa2_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
mapa2=fg[,c(3,11,19)]
row.names(mapa2) = fg$Country
mapa2_S=scale(mapa2)
mapa2_D=dist(mapa2_S)
mapa2_XY=cmdscale(mapa2_D,eig=TRUE, k=2)
x <- mapa2_XY$points[,1]
y <- mapa2_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa2_XY$GOF[1])
columnForLabels=dimnames(mapa2_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
library(NbClust)
cuantosC <- NbClust(mapa2_S, method = "complete")
library(NbClust)
cuantosC <- NbClust(mapa2_S, method = "k-means")
library(NbClust)
cuantosC <- NbClust(mapa2_S, method = "kmeans")
mapa2=fg[,c(3,11,19)]
row.names(mapa2) = fg$Country
mapa2_S=scale(mapa2)
mapa2_D=dist(mapa2_S)
mapa2_XY=cmdscale(mapa2_D,eig=TRUE, k=2)
x <- mapa2_XY$points[,1]
y <- mapa2_XY$points[,2]
plot(x, y, xlab="Dimension 1", ylab="Dimension 2", type="n",main=mapa2_XY$GOF[1])
columnForLabels=dimnames(mapa2_XY[[1]])[[1]]
text(x, y,labels = columnForLabels , cex = 0.5)
library(NbClust)
cuantosC <- NbClust(mapa2_S, method = "complete")
install.packages("feather")
setwd("~/Documents/GITHUBs/BITSS_ToolsWorkshop/Sesiones")
library(feather)
path <- "my_DF.feather"
df <- read_feather(path)
View(df)
str(df)
df$FreedomintheWorld
table(df$FreedomintheWorld)
levels(df$FreedomintheWorld)
df <- read.csv("indexes.csv")
levels(df$FreedomintheWorld)
table(df$FreedomintheWorld)
View(df)
str(df)
df <- read.csv("indexes.csv")
str(df)
df
