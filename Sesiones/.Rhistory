(cutters=cutpoints(EliteNet_giant,mode="graph",return.indicator=F))
theNames=EliteNet_giant%v%'vertex.names'
(whoCuts=theNames[cutters])
CutEgonets=igraph::make_ego_graph(asIgraph(EliteNet_giant), nodes=cutters)
CutEgonet=asNetwork(CutEgonets[[1]])
egoSizes=rep(1,network.size(CutEgonet))
egoSizes[cutters]=10
plot.network(CutEgonet,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.6)
egoSizes
egoSizes=rep(1,network.size(EliteNet_giant))
egoSizes[cutters]=10
plot.network(EliteNet_giant,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.6)
egoSizes=rep(1,network.size(EliteNet_giant))
egoSizes[cutters]=10
plot.network(EliteNet_giant,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.2)
egoSizes=rep(1,network.size(EliteNet_giant))
egoSizes[cutters]=10
plot.network(EliteNet_giant,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.3)
egoSizes=rep(1,network.size(EliteNet_giant))
egoSizes[cutters]=5
plot.network(EliteNet_giant,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.3)
egoSizes=rep(1,network.size(EliteNet_giant))
egoSizes[cutters]=5
plot.network(EliteNet_giant,
vertex.col = 'yellow',
edge.col='lightblue',
displaylabels = T,
vertex.cex=egoSizes,
label.cex=0.3,
label.pos=5)
linkAdjMx='https://github.com/EvansDataScience/data/raw/master/dataFigueroa.csv'
# column 1 will be used as row name: row.names=1
# leave names as they are: 'check.names=FALSE'
EdgesAsDF = read.csv(linkAdjMx, header=TRUE,row.names=1,check.names=FALSE)
dim(EdgesAsDF)
# column 1 will be used as row name: row.names=1
# leave names as they are: 'check.names=FALSE'
EdgesAsDF = read.csv(linkAdjMx, header=TRUE,row.names=1,check.names=FALSE)
linkAdjMx='https://github.com/EvansDataScience/data/raw/master/dataFigueroa.csv'
# column 1 will be used as row name: row.names=1
# leave names as they are: 'check.names=FALSE'
EdgesAsDF = read.csv(linkAdjMx, header=TRUE,row.names=1,check.names=FALSE)
dim(EdgesAsDF)
EdgesAsDF['Multinacional']
adjacency=EdgesAsDF[,-c(38)]
#result:
adjacency
adjacency=as.matrix(adjacency) # This coerces the object into a matrix, just in case
library(statnet)
EliteNet=network(adjacency,matrix.type="adjacency",directed=FALSE)
detach("package:statnet", unload=TRUE)
detach("package:statnet.common", unload=TRUE)
detach("package:network", unload=TRUE)
detach("package:ergm", unload=TRUE)
detach("package:ergm.count", unload=TRUE)
detach("package:sna", unload=TRUE)
detach("package:networkDynamic", unload=TRUE)
c(1,2,3)
rev(c(1,2,3))
# we are opening excel file
# we need to install "readxl": install.packages("readxl")
library(readxl)
# to ease reproducibility, store data online, and get data from the link to it.
temp = tempfile(fileext = ".xlsx") # use always with Excel
dataURL <- "https://github.com/alexaschreier/data/raw/master/data.xlsx" # link to data
download.file(dataURL, destfile=temp, mode='wb')  # file will be downloaded temporarily
Parkdata = read_excel(temp, sheet =1)
head(Parkdata,12)
names(Parkdata)
#This code corrects the variable names:
names(Parkdata)=gsub("\r\n", " ", names(Parkdata))
names(Parkdata)=gsub(" ", "_", names(Parkdata))
names(Parkdata)
names(Parkdata)
str(Parkdata)
summary(Parkdata)
library(moments)
skewness(Parkdata[,c(4:11)],na.rm = T)
kurtosis(Parkdata[,c(4:11)],na.rm = T)
library(stringr)
years=names(kurtosis(Parkdata[,c(4:11)],na.rm = T))
years=str_extract(years, "\\d+")
kt=kurtosis(Parkdata[,c(4:11)],na.rm = T)
sk=skewness(Parkdata[,c(4:11)],na.rm = T)
par(mfrow=c(2,1))
plot(years,sk,type = 'l',col='blue',ylab='skewness')
kt
sk
years
years=names(kurtosis(Parkdata[,c(4:11)],na.rm = T))
years
#Import data into RStudio library
library(readxl)
library(cluster)
library(utils)
library(rgdal)
library(jsonlite)
temp = tempfile(fileext = ".xlsx")
dataURL <- "https://github.com/alexaschreier/data/raw/master/data.xlsx"
download.file(dataURL, destfile=temp, mode='wb')
Parkdata = read_excel(temp, sheet =1)
#View the beginning of the data set
head(Parkdata)
#View the names of the data points
names(Parkdata)
#View the structure of the data
str(Parkdata)
#View a summary of the data
summary(Parkdata)
#These commands correct the variable names:
names(Parkdata)=gsub("\r\n", " ", names(Parkdata))
names(Parkdata)=gsub(" ", "_", names(Parkdata))
#Test to see that names have been corrected
names(Parkdata)
numericColumns =c("amount")
aggregateBY='Park Type'
NPS_Park_Type=aggregate(Parkdata[,numericColumns], by=list(Parkdata[,aggregateBY]), sum )
head(NPS_Park_Type)
table(Parkdata$Park_Type)
#Make sure the unit to be cluster appears just once in a column
### unit is 'Park_Name'
length(Parkdata$Park_Name)==length(unique(Parkdata$Park_Name))
Parkdata$Park_Name
length(Parkdata$Park_Name)
length(unique(Parkdata$Park_Name))
length(Parkdata$Park_Name)
sort(Parkdata$Park_Name)
Parkdata[duplicated(Parkdata$Park_Name),]
Parkdata[duplicated(Parkdata$Park_Name),]
Parkdata#[duplicated(Parkdata$Park_Name),]
View(Parkdata)
Parkdata[duplicated(Parkdata$Park_Name),]
View(Parkdata)
compressedMap="https://github.com/alexaschreier/PROJECT/raw/master/nps_boundary.zip"
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
parkzipMap <- rgdal::readOGR("nps_boundary/nps_boundary.shp",stringsAsFactors=F)
View(Parkdata)
repeated='Klondike Gold Rush'
Parkdata[Parkdata$Park_Name==repeated,]
repeated='Klondike Gold Rush'
Parkdata[Parkdata$Park_Name==repeated,]
repeated='Klondike Gold Rush'
row.names(Parkdata[Parkdata$Park_Name==repeated,])
repeated='Klondike Gold Rush'
Parkdata[Parkdata$Park_Name==repeated,]
?which
repeated='Klondike Gold Rush'
Parkdata[which(Parkdata$Park_Name==repeated),]
repeated='Klondike Gold Rush'
Parkdata[which(Parkdata$Park_Name==repeated)]
repeated='Klondike Gold Rush'
Parkdata[Parkdata$Park_Name==repeated,]
repeated='Klondike Gold Rush'
Parkdata[Parkdata$Park_Name %in% repeated,]
repeated='Klondike Gold Rush'
Parkdata[(Parkdata$Park_Name ==repeated) & (Parkdata$Region =='Pacific West Region'),]
repeated='Klondike Gold Rush'
Parkdata[!((Parkdata$Park_Name ==repeated) & (Parkdata$Region =='Pacific West Region')),]
repeated='Klondike Gold Rush'
Parkdata[(Parkdata$Park_Name ==repeated) & (Parkdata$Region =='Pacific West Region'),]
repeated='Klondike Gold Rush'
Parkdata[!((Parkdata$Park_Name ==repeated) & (Parkdata$Region =='Pacific West Region')),]
repeated='Klondike Gold Rush'
Parkdata=Parkdata[!((Parkdata$Park_Name ==repeated) & (Parkdata$Region =='Pacific West Region')),]
#Use the column with the names of unit of analysis as the row names
#row.names(Parkdata)=Parkdata$Recreation_Visits
row.names(Parkdata)=Parkdata$Park_Name
#Use the column with the names of unit of analysis as the row names
#row.names(Parkdata)=Parkdata$Recreation_Visits
Parkdata=as.data.frame(Parkdata)
row.names(Parkdata)=Parkdata$Park_Name
View(Parkdata)
View(Parkdata)
names(Parkdata)
#Make sure the columns that you will use for clustering (input columns) are in the right type.
str(Parkdata[,c(4,9)])
#Make sure the columns that you will use for clustering (input columns) are in the right type.
str(Parkdata[,c(4:7)])
#Make sure the columns that you will use for clustering (input columns) are in the right type.
str(Parkdata[,c(4:11)])
# metric chosen: 'euclidean' - valid just for numerica data
# you can try "manhattan" in metric to benefit similarity over discrepancies
# you can try "gower" if you have numbers and factors.
demoSimi=daisy(Parkdata[,c(4:11)],metric = "euclidean",
stand=TRUE) # standardizing
# input is: similary matrix
demoClus=hclust(demoSimi,method = 'average') # linkage is 'average'
# General plot
plot(demoClus,cex=0.5)
# input is: similary matrix
demoClus=hclust(demoSimi,method = 'simple') # linkage is 'average'
# input is: similary matrix
demoClus=hclust(demoSimi,method = 'single') # linkage is 'average'
# General plot
plot(demoClus,cex=0.5)
# input is: similary matrix
demoClus=hclust(demoSimi,method = 'complete') # linkage is 'average'
# General plot
plot(demoClus,cex=0.5)
plot(demoClus,cex=0.3)
rect.hclust(demoClus, k = 5,border = c('orange','blue','red','green','yellow'))
compressedMap="https://github.com/alexaschreier/PROJECT/raw/master/nps_boundary.zip"
temp=tempfile()
download.file(compressedMap, temp)
unzip(temp)
(maps=list.files(pattern = 'shp'))
parkzipMap <- rgdal::readOGR("nps_boundary/nps_boundary.shp",stringsAsFactors=F)
names(parkzipMap)
names(parkzipMap)
table(parkzipMap$UNIT_TYPE)
length(unique(parkzipMap$UNIT_NAME))
length(parkzipMap$UNIT_NAME)
parkzipMap_B=parkzipMap[unique(parkzipMap$UNIT_NAME),]
#parkzipMap_B=
parkzipMap[unique(parkzipMap$UNIT_NAME),]
#parkzipMap_B=
parkzipMap[unique(parkzipMap$UNIT_NAME)]
row.names(Parkdata)=NULL
merge(parkzipMap,Parkdata,by.x='UNIT_NAME',by.y='Park_Name')
row.names(Parkdata)=NULL
totalMap=merge(parkzipMap,Parkdata,by.x='UNIT_NAME',by.y='Park_Name')
names(totalMap)
table(totalMap$Region)
AlaskaMap=totalMap[totalMap$Region=='Alaska Region',]
AlaskaMap=totalMap[totalMap$Region %in% 'Alaska Region',]
AlaskaMap=totalMap[totalMap$Region %in% 'Alaska Region',]
IntermounMap=totalMap[totalMap$Region %in% 'Intermountain Region',]
midWMap=totalMap[totalMap$Region %in% 'Midwest Region',]
natioCapMap=totalMap[totalMap$Region %in% 'National Capital Region',]
northEMap=totalMap[totalMap$Region %in% 'Northeast Region',]
pacWestMap=totalMap[totalMap$Region %in% 'Pacific West Region',]
southEMap=totalMap[totalMap$Region %in% 'Southeast Region',]
plot(AlaskaMap)
AlaskaMap$Recreation_Visits
library(RColorBrewer)
library(classInt)
numberOfClasses = 3
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
varToPlot=AlaskaMap$Recreation_Visits
library(RColorBrewer)
library(classInt)
numberOfClasses = 3
colorForScale='YlGnBu'
colors = brewer.pal(numberOfClasses, colorForScale)
intervals <- classIntervals(varToPlot, numberOfClasses,
style = "quantile",
dataPrecision=2)
colorPallette <- findColours(intervals, colors)
plot(AlaskaMap, col = colorPallette,border='grey')
plot(AlaskaMap, col = colorPallette,border='grey')
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
legendText="Count of visits"
shrinkLegend=0.4
title="Visits"
plot(AlaskaMap, col = colorPallette,border='grey',main=title)
legend('topright', legend = names(attr(colorPallette, "table")),
fill = attr(colorPallette, "palette"), cex = shrinkLegend,
bty = "n",
title=legendText)
edadesTrabajadores=read.csv("edades.csv")
colnames(edadesTrabajadores)
edadesTrabajadores$Edad
summary(edadesTrabajadores$Edad)
#dividiendo la zona de gráficas, 1 fila 2 columnas:
par(mfrow=c(1,2))
hist(edadesTrabajadores$Edad)
boxplot(edadesTrabajadores$Edad,horizontal = TRUE)
#dividiendo la zona de gráficas, 2 filas y 1 columna:
par(mfrow=c(2,1))
hist(edadesTrabajadores$Edad)
boxplot(edadesTrabajadores$Edad,horizontal = TRUE)
?t.test
t.test(Trabajadores,mu=48,alternative = "two-sided")
t.test(Trabajadores,mu=48,alternative = "two.sided")
Trabajadores=read.csv("edades.csv")
colnames(Trabajadores)
Trabajadores$Edad
summary(Trabajadores$Edad)
#dividiendo la zona de gráficas, 2 filas y 1 columna:
par(mfrow=c(2,1))
hist(Trabajadores$Edad)
boxplot(Trabajadores$Edad,horizontal = TRUE)
t.test(Trabajadores,mu=48,alternative = "two.sided")
t.test(Trabajadores$Edad,mu=48,alternative = "two.sided")
resultado
resultado=t.test(Trabajadores$Edad,mu=48,alternative = "two.sided")
alfa=0.05
resultado$p.value<alfa
alfa=0.05
test=resultado$p.value<alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text2,text1)
resultado$p.value
resultado$p.value
?wilcox.test
?t.test
resultado=t.test(Edad,mu=48,alternative = "two.sided",data=Trabajadores)
resultado=t.test(~Edad,mu=48,alternative = "two.sided",data=Trabajadores)
resultado=t.test(.~Edad,mu=48,alternative = "two.sided",data=Trabajadores)
resultado=t.test(Trabajadores$Edad,mu=48,alternative = "two.sided")
wilcox.test(Trabajadores$Edad,mu=48,alternative = "two.sided")
wilcox.test(Trabajadores$Edad,mu=48,alternative = "two.sided",exact = F)
wilcox.test(Trabajadores$Edad,mu=48,alternative = "two.sided", exact = F)
resultado_W=wilcox.test(Trabajadores$Edad,mu=48,alternative = "two.sided", exact = F)
resultado_W$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_WT$p.value>=alfa
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
resultado_W$p.value
Trabajadores=read.csv("notas.csv")
alumnos=read.csv("notas.csv")
Alumnos=read.csv("notas.csv")
colnames(Alumnos)
Alumnos$notas
Alumnos$notas
Alumnos$nota
Alumnos
head(Alumnos,12)
Alumnos
?summary.table
?tapply
tapply(Alumnos$Edad,Alumnos$especialidad,summary)
tapply(Alumnos$nota,Alumnos$especialidad,summary)
?hist
#dividiendo la zona de gráficas, 2 filas y 1 columna:
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = TRUE)
#dividiendo la zona de gráficas, 2 filas y 1 columna:
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = F)
par(mfrow=c(2,1))
hist(Alumnos$nota[Alumnos$especialidad==1])
hist(Alumnos$nota[Alumnos$especialidad==2])
?t.test
resultado_T=t.test(notas~especialidad,data=Alumnos)
resultado_T=t.test(nota~especialidad,data=Alumnos)
resultado_T$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos,exact = F)
resultado_W$p.value
resultado_W$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.10  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
resultado_W=wilcox.test(nota~especialidad,data=Alumnos,exact = F)
resultado_W$p.value
alfa=0.10  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
Empresa=read.csv("performance.csv")
colnames(Empresa)
Empresa
tapply(Empresa$performance,Empresa$grupo,summary)
tapply(Empresa$performance,Empresa$grupo,summary)
par(mfrow=c(3,1))
hist(Empresa$performance[Empresa$grupo==1])
hist(Empresa$performance[Empresa$grupo==2])
hist(Empresa$performance[Empresa$grupo==3])
boxplot(Empresa$performance~Empresa$grupo,horizontal = F)
resultado_F=aov(performance ~ grupo, data = Empresa)
resultado_F$p.value
resultado_F$p.value
resultado_F
str(resultado_F)
?aov
str(summary(resultado_F))
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F
str(resultado_F)
resultado_F$[1]
resultado_F
resultado_F$Pr(>F)
resultado_F$`Pr(>F)`
resultado_F$p.value
str(resultado_F)
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F=as.data.frame(resultado_F)
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
resultado_F=unlist(resultado_F)
str(resultado_F)
resultado_F
resultado_F$`Pr(>F)1`
resultado_F[1]
resultado_F
resultado_F[9]
resultado_F=summary(aov(performance ~ grupo, data = Empresa))
#resultado_F=unlist(resultado_F)
resultado_F[9]
resultado_F[[9]]
resultado_F[[1]]
resultado_F[[1]][5]
resultado_F[[1]][[5]]
resultado_F[[1]][[5]][1]
resultado_F[[1]][[5]]#[1]
resultado_F[[1]]#[[5]]#[1]
resultado_F[[1]][`Pr(>F)`]#[[5]]#[1]
resultado_F=summary(aov(performance ~ grupo, data = Empresa))[[1]][[5]][1]
resultado_F
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_T$p.value>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_F$p.value>=alfa
alfa=0.05  # puedes cambiar este valor
test=resultado_F>=alfa
text1='aceptar igualdad'
text2='rechazar igualdad'
ifelse(test,text1,text2)
kruskal.test(performance~grupo,data=Empresa)
#resultado_KW=wilcox.test(performance~grupo,data=Empresa,exact = F)
resultado_KW=kruskal.test(performance~grupo,data=Empresa)
resultado_KW$p.value
alfa=0.05  # puedes cambiar este valor
test=resultado_W$p.value>=alfa
ifelse(test,text1,text2)
alfa=0.05  # puedes cambiar este valor
test=resultado_KW$p.value>=alfa
ifelse(test,text1,text2)
?kruskal.test
Trabajadores=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/edades.csv")
Trabajadores=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/edades.csv")
colnames(Trabajadores)
Alumnos=read.csv("https://s3-sa-east-1.amazonaws.com/ulima/notas.csv")
par(mfrow=c(2,1))
hist(Alumnos$nota[Alumnos$especialidad==1])
hist(Alumnos$nota[Alumnos$especialidad==2])
boxplot(Alumnos$nota~Alumnos$especialidad,horizontal = F)
par(mfrow=c(3,1))
hist(Empresa$performance[Empresa$grupo==1])
hist(Empresa$performance[Empresa$grupo==2])
hist(Empresa$performance[Empresa$grupo==3])
boxplot(Empresa$performance~Empresa$grupo,horizontal = F)
alfa=0.05  # puedes cambiar este valor
test=resultado_KW$p.value>=alfa
ifelse(test,text1,text2)
pairwise.wilcox.test((performance~grupo,data=Empresa,
pairwise.wilcox.test((performance~grupo,data=Empresa,p.adjust.method = "BH")
pairwise.wilcox.test(performance~grupo,data=Empresa,p.adjust.method = "BH")
?pairwise.wilcox.test
pairwise.wilcox.test(performance,grupo,data=,p.adjust.method = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adjust.method = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonf")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonf")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonferroni")
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "bonferroni",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "none",exact=F)
```{r}
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BY",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "BH",exact=F)
pairwise.wilcox.test(Empresa$performance,Empresa$grupo,p.adj = "fdr",exact=F)
setwd("~/Documents/GITHUBs/BITSS_ToolsWorkshop/Sesiones")
?KMO
psych::KMO
?psych::KMO
