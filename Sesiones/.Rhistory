print(paste("Relationship between","DemocracyIndex and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
print(paste("Relationship between","DemocracyIndex and"))
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx$DemocracyIndex)
print(paste( x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx$DemocracyIndex)
print(paste("Relationship between","DemocracyIndex and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx$DemocracyIndex)
print(paste("Relationship between","DemocracyIndex and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
cor(dataidx[explanans])
cor(dataidx[explanans],use = "na.or.complete")
?lm
View(dataidx)
LinRegEPI = lm(DemocracyIndex ~ ., data = indexes,subset = c(,c(2:5)))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = c(,c(2:5)))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = c(,2:5))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = c(:,2:5))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = dataidx[,c(2:5))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = dataidx[,c(2:5)
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = dataidx[,c(2:5)))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = dataidx[,c(2:5)))
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx,subset = dataidx[,c(2:5)])
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx[,c(2:5)])
LinRegEPI
LinRegEPI = lm(DemocracyIndex ~ ., data = dataidx[,c(2:5)])
summary(LinRegEPI)
corrTable=cor(dataidx[explanans],use = "na.or.complete")
mcor<-round(corrTable,2)
mcor
corrTable=cor(dataidx[explanans],use = "na.or.complete")
mcor<-round(corrTable,2)
# Hide upper triangle
upper<-mcor
upper[upper.tri(mcor)]<-""
upper<-as.data.frame(upper)
upper
library(xtable)
print(xtable(upper), type="html")
library(xtable)
print(xtable(upper), type="tex")
View(dataidx)
?cor
names(dataidx)
extraNames
View(dataidx)
?upper.tri
mcor[upper.tri(mcor)]
# some help:
level5=c("muy malo","malo","medio","bueno","muy bueno")
level4=c("muy malo","malo","bueno","muy bueno")
level3=c("muy malo","medio","muy bueno")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = FALSE)
str(dataidx)
View(dataidx)
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx[,5])
print(paste("Relationship between","DemocracyIndex and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx[,5])
print(paste("Relationship between","Democracy and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
cor(dataidx[,5]dataidx[,explanans])
cor(dataidx[,5],dataidx[,explanans])
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = FALSE)
str(dataidx)
# previsión:
level5=c("muy malo","malo","medio","bueno","muy bueno")
level4=c("muy malo","malo","bueno","muy bueno")
level3=c("muy malo","medio","muy bueno")
# carga de datos
filename="indexes.csv"
dataidx=read.csv(filename, stringsAsFactors = FALSE)
str(dataidx)
# previsión:
level5=c("muy malo","malo","medio","bueno","muy bueno")
level4=c("muy malo","malo","bueno","muy bueno")
level3=c("muy malo","medio","muy bueno")
demoTable=table(dataidx[,5])
names(demoTable)=level4
demoTable
demoTableRel=round(prop.table(demoTable)*100,1)
demoTableRel
title='Distribución de la Democracia'
paleta='red'
demoTableRelPlot=barplot(demoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
demoTableRelPlot
ecoTable=table(dataidx[,3])
names(ecoTable)=level5
ecoTable
ecoTableRel=round(prop.table(ecoTable)*100,1)
ecoTableRel
title='Distribución de la Libertad Económica'
paleta='red'
ecoTableRelPlot=barplot(ecoTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
ecoTableRelPlot
worldTable=table(dataidx[,2])
names(worldTable)=level3
worldTable
worldTableRel=round(prop.table(worldTable)*100,1)
worldTableRel
title='Distribución de la Libertad en el Mundo'
paleta='red'
worldTableRelPlot=barplot(worldTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
worldTableRelPlot
pressTable=table(dataidx[,4])
names(pressTable)=level5
pressTable
pressTableRel=round(prop.table(pressTable)*100,1)
pressTableRel
title='Distribución de la Libertad de Prensa'
paleta='red'
pressTableRelPlot=barplot(pressTableRel,main=title,
col=paleta,ylim = c(0,100),
ylab = "%")
pressTableRelPlot
summary(dataidx[,-1])
explanans=names(dataidx)[c(2:4)]
for (x in explanans){
p=cor.test(dataidx[,x],dataidx[,5])
print(paste("Relationship between","Democracy and", x,"is"))
pearson=round(p$estimate,2)
message=ifelse(p$p.value<0.05,"(significative)",'(not significative)')
print(paste("Pearson:",pearson,message))
}
cor(dataidx[,5],dataidx[,explanans])
cor(dataidx[,5],dataidx[,explanans],use = "na.or.complete")
corrDem
corrDem=cor(dataidx[,5],dataidx[,explanans],
use = "na.or.complete")
corrDem
?cor
lower
corrTable
corrTable=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# Hide upper triangle
corrTable[upper.tri(corrTable)]<-""
corrTable
View(dataidx)
corrTable
?barplot
str(demoTableRelPlot)
?tableNominal
install.packages("corrplot")
library(corplot)
corrplot(corrTableX, type = "upper")
library(corplot)
library(corrplot)
corrplot(corrTableX, type = "upper")
corrTableX=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# Hide upper triangle
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="Correlación entre variables independientes",label = 'corrTableX')
library("stargazer", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
corrTableX=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
# Hide upper triangle
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="Correlación entre variables independientes",label = 'corrTableX')
library(corrplot)
corrplot(corrTableX, type = "upper")
corrTableX_copy=corrTableX
library(corrplot)
corrplot(corrTableX_copy, type = "upper")
corrTableX_copy
corrTableX=round(cor(dataidx[explanans],
use = "na.or.complete"),2)
corrTableX_copy=corrTableX
# Hide upper triangle
corrTableX[upper.tri(corrTableX)]<-""
stargazer(corrTableX, title="Correlación entre variables independientes",label = 'corrTableX')
corrplot(corrTableX, type = "upper")
corrTableX_copy
library(corrplot)
corrplot(corrTableX_copy, type = "upper")
library(corrplot)
corrplot(corrTableX_copy, type = "lower",col = terrain.colors(100))
library(corrplot)
corrplot(corrTableX_copy, type = "lower")
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = FALSE)
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = TRUE)
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = F)
library(corrplot)
corrplot(corrTableX_copy, type = "lower", diag = F,
addCoef.col = "black")
library(rgdal)
folder='world_map'
file='COL_adm1'
mapaFile=file.path(folder,file)
colRegs <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
library(rgdal)
folder='world_map'
file='COL_adm1.shp'
mapaFile=file.path(folder,file)
colRegs <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
library(rgdal)
folder='world_map'
file='world_map.shp'
mapaFile=file.path(folder,file)
colRegs <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
plot(colRegs)
str(colRegs)
str(colRegs@data)
names(colRegs)
names(colRegs)
View(dataidx)
colRegs=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
library(rgdal)
folder='world_map'
file='world_map.shp'
mapaFile=file.path(folder,file)
colRegs <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
names(colRegs)
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
nrow(colRegsIdx)
nrow(colRegs)
nrow(colRegsIdx)
nrow(colRegsIdx)
nrow(colRegs)
plot(colRegs,col='black')
plot(colRegsIdx,col='pink',border='grey',add=T)
names(colRegsIdx)
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
colRegsIdx[,c(dimensions)]
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
colRegsIdx@data[,c(dimensions)]
dimensions=c("NAME","EconomicFreedom","PressFreedom","Democracy")
colRegsIdx@data[,c(dimensions)]
daysi(colRegsIdx@data[,c(dimensions)])
library(cluster)
daysi(colRegsIdx@data[,c(dimensions)])
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
library(cluster)
daisy(colRegsIdx@data[,c(dimensions)])
daisy(colRegsIdx@data[,c(dimensions)])
daisy(colRegsIdx@data[,c(dimensions)],metric = "gower")
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
library(cluster)
daisy(colRegsIdx@data[,c(dimensions)],metric = "gower")
colRegsIdx@data[,c(dimensions)]=lapply(colRegsIdx@data[,c(dimensions)],as.ordered)
daisy(colRegsIdx@data[,c(dimensions)],metric = "gower")
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
daisy(colRegsIdx@data[,c(dimensions)],metric = "gower")
colRegsIdx@data[,c(dimensions)]=lapply(colRegsIdx@data[,c(dimensions)],as.ordered)
str(colRegsIdx@data)
summary(dist)
dist=daisy(colRegsIdx@data[,c(dimensions)],metric = "gower")
summary(dist)
?daisy
pam_fit <- pam(dist, diss = TRUE, k = 3)
pam_fit$medoids
library(rgdal)
folder='world_map'
file='world_map.shp'
mapaFile=file.path(folder,file)
colRegs <- rgdal::readOGR(mapaFile,stringsAsFactors=F)
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
dataCluster=lapply(colRegsIdx@data[,c(dimensions)],as.ordered)
View(dataCluster)
dataCluster=colRegsIdx@data[,c(dimensions)]
dataCluster=lapply(colRegsIdx@data[,c(dimensions)],as.ordered)
dataCluster=colRegsIdx@data[,c(dimensions)]
dataCluster=lapply(dataCluster,as.ordered)
View(dataCluster)
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
dataCluster=lapply(dataCluster,as.ordered)
dataCluster=lapply(dataCluster[,],as.ordered)
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
dataCluster
names(dataCluster)=colRegsIdx@data$NAME
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
library(cluster)
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
names(dataCluster)=colRegsIdx@data$NAME
names(dataCluster)
rownames(dataCluster)
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=lapply(dataCluster,as.ordered)
dataCluster=unlist(lapply(dataCluster,as.ordered))
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=unlist(lapply(dataCluster,as.ordered))
dataCluster
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=as.data.frame(unlist(lapply(dataCluster,as.ordered)))
dataCluster
dataCluster=as.data.frame(colRegsIdx@data[,c(dimensions)])
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=data.frame(unlist(lapply(dataCluster,as.ordered)))
dataCluster
dataCluster=colRegsIdx@data[,c(dimensions)]
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=unlist(lapply(dataCluster,as.ordered))
dataCluster
dataCluster=colRegsIdx@data[,c(dimensions)]
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster=as.data.frame(lapply(dataCluster,as.ordered))
View(dataCluster)
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
dimensions=c("EconomicFreedom","PressFreedom","Democracy")
library(cluster)
dataCluster=colRegsIdx@data[,c(dimensions)]
rownames(dataCluster)=colRegsIdx@data$NAME
dataCluster
dataCluster
dataCluster=as.data.frame(lapply(dataCluster,as.ordered))
dataCluster
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
dimensions=c("NAME","EconomicFreedom","PressFreedom","Democracy")
dataCluster=colRegsIdx@data[,c(dimensions)]
rownames(dataCluster)=dataCluster$NAME
dataCluster
View(dataCluster)
dataCluster[,-1]=lapply(dataCluster[,-1],as.ordered)
View(dataCluster)
View(dataCluster)
colRegsIdx=merge(colRegs,dataidx, by.x='NAME', by.y='Country',all.x=F)
dimensions=c("NAME","EconomicFreedom","PressFreedom","Democracy")
library(cluster)
dataCluster=colRegsIdx@data[,c(dimensions)]
dataCluster[,-1]=lapply(dataCluster[,-1],as.ordered)
str(dataCluster)
row.names(dataCluster)=dataCluster$NAME
dist=daisy(dataCluster[,-1],metric = "gower")
pam_fit <- pam(dist, diss = TRUE, k = 3)
pam_fit$clustering
pam_fit$medoids
pam_fit$clustering
class(pam_fit$clustering)
str(pam_fit$clustering)
as.data.frame(pam_fit$clustering)
clusters=as.data.frame(pam_fit$clustering)
clusters$NAME=row.names(clusters)
View(clusters)
colRegsIdx=merge(colRegsIdx,clusters, by='NAME',all.x=F)
colRegsIdx@data
names(clusters)=c('cluster','NAME')
colRegsIdx=merge(colRegsIdx,clusters, by='NAME',all.x=F)
colRegsIdx@data
library(RColorBrewer)
library(classInt)
numberOfClasses = length(levels(varToPLot)) # first change
varToPLot=colRegsIdx$cluster
colors = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey')
plot(colRegsIdx, col = colors[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(levels(varToPLot)) # first change
colors = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey')
plot(colRegsIdx, col = colors[varToPLot],border='grey',add=T)
colors
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(levels(varToPLot)) # first change
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey')
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(levels(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey')
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
numberOfClasses
unique(varToPLot)
length(unique(varToPLot))
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey')
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=NA)
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=NULL)
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border='grey',add=T)
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border=F,add=T)
paleta
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("UP","MEDIUM","LOW"), # third change
fill = colors, # fourth change
cex = 0.6,
bty = "n",
title="conglomerado")
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("UP","MEDIUM","LOW"), # third change
fill = paleta, # fourth change
cex = 0.6,
bty = "n",
title="conglomerado")
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("LOW","MEDIUM","UP"), # third change
fill = paleta, # fourth change
cex = 0.6,
bty = "n",
title="conglomerado")
library(RColorBrewer)
library(classInt)
varToPLot=colRegsIdx$cluster
numberOfClasses = length(unique(varToPLot))
colorForScale='Set2'
paleta = brewer.pal(numberOfClasses, colorForScale)
plot(colRegs,col='grey',border=0)
plot(colRegsIdx, col = paleta[varToPLot],border=F,add=T)
legend('left', legend = c("MEDIUM","LOW","UP"), # third change
fill = paleta, # fourth change
cex = 0.6,
bty = "n",
title="conglomerado")
unique(varToPLot)
